# yaml-language-server: $schema=https://raw.githubusercontent.com/defenseunicorns/uds-cli/v0.13.1/uds.schema.json
kind: UDSBundle
metadata:
  name: software-factory-nutanix
  description: A UDS bundle for deploying a software factory to an RKE2 cluster
  # x-release-please-start-version
  version: "0.3.0"
  # x-release-please-end
  architecture: amd64

x-extra-volume-mounts: &extra-volume-mounts
  - name: trust-bundle
    mountPath: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    subPath: "ca-bundle.crt"
    readOnly: true
  - name: trust-bundle
    mountPath: /etc/pki/ca-trust/extracted/java/cacerts
    subPath: "ca-bundle.jks"
    readOnly: true

x-extra-volumes: &extra-volumes
  - name: trust-bundle
    configMap:
      name: trust-bundle
      defaultMode: 0644

x-gitlab-init-security-context: &gitlab-init-security-context
  privileged: true
  readOnlyRootFilesystem: false
  runAsUser: 0

packages:
  # Zarf init
  - name: init
    path: ../../build
    optionalComponents:
      - git-server
    ref: v0.36.1
    overrides:
      zarf-seed-registry:
        docker-registry:
          variables:
            - name: REGISTRY_STORAGE_CLASS
              path: persistence.storageClass
              default: "nutanix-dynamicfile"
      zarf-registry:
        docker-registry:
          variables:
            - name: REGISTRY_STORAGE_CLASS
              path: persistence.storageClass
              default: "nutanix-dynamicfile"

  - name: trust-manager
    path: ../../build
    ref: 0.0.1

  - name: trust-bundles
    path: ../../build
    ref: 0.0.1

  # MetalLB
  - name: metallb
    repository: ghcr.io/defenseunicorns/packages/metallb
    ref: 0.0.5-amd64

  - name: core
    repository: ghcr.io/defenseunicorns/packages/uds/core
    ref: 0.24.1-registry1
    overrides:
      grafana:
        grafana:
          values:
            - path: extraVolumes
              value: *extra-volumes
            - path: extraVolumeMounts
              value: *extra-volume-mounts
          variables:
            - name: GRAFANA_RESOURCE_CONFIG
              path: resources
              default:
                requests:
                  cpu: 500m
                  memory: 512Mi
                limits:
                  cpu: 2
                  memory: 2Gi
      kube-prometheus-stack:
        kube-prometheus-stack:
          variables:
            - name: PROMETHEUS_RESOURCE_CONFIG
              path: prometheus.prometheusSpec.resources
              default:
                requests:
                  cpu: 1
                  memory: 2Gi
                limits:
                  cpu: 4
                  memory: 8Gi
          values:
            - path: kube-state-metrics.resources
              value:
                requests:
                  cpu: 20m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
      velero:
        velero:
          variables:
            - name: VELERO_RESOURCE_CONFIG
              path: resources
              description: "Velero Resource Config"
              default:
                requests:
                  cpu: 500m
                  memory: 128Mi
                limits:
                  cpu: 1
                  memory: 2Gi
          values:
            - path: initContainers
              value:
                - name: velero-plugin-for-aws
                  image: registry1.dso.mil/ironbank/opensource/velero/velero-plugin-for-aws:v1.10.0
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - mountPath: /target
                      name: plugins
                - name: velero-plugin-for-csi
                  image: registry1.dso.mil/ironbank/opensource/velero/velero-plugin-for-csi:v0.7.1
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - mountPath: /target
                      name: plugins
            - path: configuration.features
              value: EnableCSI
            - path: snapshotsEnabled
              value: true
            - path: configuration.volumeSnapshotLocation
              value:
                - name: default
                  provider: aws
                  config:
                    region: "us-east-1"
                  credential:
                    name: "velero-bucket-credentials"
                    key: "cloud"
            - path: schedules
              value:
                uds-jira-backup:
                  disabled: false
                  schedule: "0 3 * * *"
                  useOwnerReferencesInBackup: false
                  template:
                    csiSnapshotTimeout: 0s
                    includeClusterResources: true
                    snapshotVolumes: true
                    includedNamespaces:
                      - jira
                    ttl: "240h"
                uds-confluence-backup:
                  disabled: false
                  schedule: "0 3 * * *"
                  useOwnerReferencesInBackup: false
                  template:
                    csiSnapshotTimeout: 0s
                    includeClusterResources: true
                    snapshotVolumes: true
                    includedNamespaces:
                      - confluence
                    ttl: "240h"
                uds-mattermost-backup:
                  disabled: false
                  schedule: "0 3 * * *"
                  useOwnerReferencesInBackup: false
                  template:
                    csiSnapshotTimeout: 0s
                    includeClusterResources: true
                    snapshotVolumes: true
                    includedNamespaces:
                      - mattermost
                    ttl: "240h"
                uds-nexus-backup:
                  disabled: false
                  schedule: "0 3 * * *"
                  useOwnerReferencesInBackup: false
                  template:
                    csiSnapshotTimeout: 0s
                    includeClusterResources: true
                    snapshotVolumes: true
                    includedNamespaces:
                      - nexus
                    ttl: "240h"
                uds-gitlab-backup:
                  disabled: false
                  schedule: "0 3 * * *"
                  useOwnerReferencesInBackup: false
                  template:
                    csiSnapshotTimeout: 0s
                    includeClusterResources: true
                    snapshotVolumes: true
                    includedNamespaces:
                      - gitlab
                    ttl: "240h"
            - path: extraVolumes
              value: *extra-volumes
            - path: extraVolumeMounts
              value: *extra-volume-mounts
      keycloak:
        keycloak:
          values:
            - path: "devMode"
              value: "false"
            - path: "autoscaling.enabled"
              value: "false"
            - path: "persistence.providers.enabled"
              value: "true"
            - path: "persistence.accessMode"
              value: "ReadWriteMany"
            - path: "persistence.storageClassName"
              value: "nutanix-dynamicfile"
            - path: extraVolumes
              value: *extra-volumes
            - path: extraVolumeMounts
              value: *extra-volume-mounts
          variables:
            - name: KEYCLOAK_DB_USERNAME
              description: "keycloak database username"
              path: postgresql.username
              default: "postgres"
            - name: KEYCLOAK_DB_PASSWORD
              description: "keycloak database password"
              path: postgresql.password
              default: "replace-me"
            - name: KEYCLOAK_DB_NAME
              description: "keycloak database name"
              path: postgresql.database
              default: "keycloakdb"
            - name: KEYCLOAK_DB_ENDPOINT
              description: "keycloak database name"
              path: postgresql.host
              default: "postgresql"
            - name: KEYCLOAK_INSECURE_ADMIN_PASSWORD_GENERATION
              description: "Generate an insecure admin password for dev/test"
              path: insecureAdminPasswordGeneration.enabled
            - name: KEYCLOAK_RESOURCE_CONFIG
              description: "Keycloak Resource Config"
              path: resources
              default:
                requests:
                  cpu: 400m
                  memory: 512Mi
                limits:
                  cpu: 1
                  memory: 2Gi
      loki:
        loki:
          values:
            # Override default dns service name for Loki Gateway
            - path: "global.dnsService"
              value: "rke2-coredns-rke2-coredns"
            - path: backend.extraVolumes
              value: *extra-volumes
            - path: backend.extraVolumeMounts
              value: *extra-volume-mounts
            - path: gateway.extraVolumes
              value: *extra-volumes
            - path: gateway.extraVolumeMounts
              value: *extra-volume-mounts
            - path: write.extraVolumes
              value: *extra-volumes
            - path: write.extraVolumeMounts
              value: *extra-volume-mounts
            - path: read.extraVolumes
              value: *extra-volumes
            - path: read.extraVolumeMounts
              value: *extra-volume-mounts
          variables:
            - name: LOKI_CHUNKS_BUCKET
              description: "The object storage bucket for Loki chunks"
              path: loki.storage.bucketNames.chunks
              default: "loki-chunks-bucket"
            - name: LOKI_RULER_BUCKET
              description: "The object storage bucket for Loki ruler"
              path: loki.storage.bucketNames.ruler
              default: "loki-ruler-bucket"
            - name: LOKI_ADMIN_BUCKET
              description: "The object storage bucket for Loki admin"
              path: loki.storage.bucketNames.admin
              default: "loki-admin-bucket"
            - name: LOKI_S3_ENDPOINT
              description: "The S3 endpoint"
              path: loki.storage.s3.endpoint
            - name: LOKI_S3_REGION
              description: "The S3 region"
              path: loki.storage.s3.region
            - name: LOKI_S3_ACCESS_KEY_ID
              description: "The S3 Access Key ID"
              path: loki.storage.s3.accessKeyId
            - name: LOKI_S3_SECRET_ACCESS_KEY
              path: loki.storage.s3.secretAccessKey
              description: "The S3 Secret Access Key"
            - name: LOKI_WRITE_REPLICAS
              path: write.replicas
              description: "Loki write replicas"
              default: "1"
            - name: LOKI_READ_REPLICAS
              path: read.replicas
              description: "Loki read replicas"
              default: "1"
            - name: LOKI_BACKEND_REPLICAS
              path: backend.replicas
              description: "Loki backend replicas"
              default: "1"
            - name: LOKI_WRITE_PERSISTENCE_SIZE
              path: write.persistence.size
              description: "Loki write persistence size"
              default: 128Gi
            - name: LOKI_BACKEND_PERSISTENCE_SIZE
              path: backend.persistence.size
              description: "Loki backend persistence size"
              default: 128Gi
            - name: LOKI_QUERY_INTERVAL
              path: loki.limits_config.split_queries_by_interval
              description: "Query interval to not hit limits"
              default: "30m"
            - name: LOKI_MAX_REQUESTS_PER_TENANT
              path: loki.query_scheduler.max_outstanding_requests_per_tenant
              description: "Set to new Loki 3.0 default"
              default: 32000
      istio-admin-gateway:
        uds-istio-config:
          variables:
            - name: ADMIN_TLS_CERT
              description: "The TLS cert for the admin gateway (must be base64 encoded)"
              path: tls.cert
            - name: ADMIN_TLS_KEY
              description: "The TLS key for the admin gateway (must be base64 encoded)"
              path: tls.key
      istio-tenant-gateway:
        gateway:
          values:
            - path: "service.ports"
              value:
                - name: status-port
                  port: 15021
                  protocol: TCP
                  targetPort: 15021
                - name: http2
                  port: 80
                  protocol: TCP
                  targetPort: 80
                - name: https
                  port: 443
                  protocol: TCP
                  targetPort: 443
                - name: tcp-ssh
                  port: 22
                  protocol: TCP
                  targetPort: 2022
        uds-istio-config:
          variables:
            - name: TENANT_TLS_CERT
              description: "The TLS cert for the tenant gateway (must be base64 encoded)"
              path: tls.cert
            - name: TENANT_TLS_KEY
              description: "The TLS key for the tenant gateway (must be base64 encoded)"
              path: tls.key
      promtail:
        promtail:
          variables:
            - name: PROMTAIL_RESOURCE_CONFIG
              description: "Promtail Resource Config"
              path: resources
              default:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 1
                  memory: 1Gi

  # NOTE -- depends on hardcoded PVC name(s) in core.keycloak
  - name: keycloak-config-wrapper
    path: ../../build
    ref: 0.0.1

  # Additional manifests needed
  - name: additional-manifests
    path: ../../build
    ref: 0.0.2

  # Gitlab
  - name: gitlab-valkey
    repository: ghcr.io/defenseunicorns/packages/uds/valkey
    ref: 7.2.5-uds.2-upstream
    overrides:
      valkey:
        uds-valkey-config:
          values:
            - path: custom
              value:
                - direction: Ingress
                  selector:
                    app.kubernetes.io/name: valkey
                  remoteNamespace: gitlab
                  port: 6379
                  description: "Ingress from GitLab"
            - path: copyPassword
              value:
                enabled: true
                namespace: gitlab
                secretName: gitlab-redis
                secretKey: password

  - name: gitlab-object-store
    path: ../../build
    ref: 0.0.1

  - name: gitlab-database-secret
    path: ../../build
    ref: 0.0.1

  - name: gitlab
    repository: ghcr.io/defenseunicorns/packages/uds/gitlab
    ref: 17.1.2-uds.0-registry1
    overrides:
      gitlab:
        uds-gitlab-config:
          values:
            - path: storage.internal
              value: false
            - path: postgres.internal
              value: false
            - path: redis
              value:
                internal: true
                selector:
                  app.kubernetes.io/name: valkey
                namespace: valkey
                port: 6379
        gitlab:
          values:
            - path: global.certificates.customCAs
              value:
                - configMap: trust-bundle
                  keys:
                    - ca-bundle.crt
            - path: gitlab.webservice.init.containerSecurityContext
              value: *gitlab-init-security-context
            - path: gitlab.toolbox.init.containerSecurityContext
              value: *gitlab-init-security-context
            - path: gitlab.sidekiq.init.containerSecurityContext
              value: *gitlab-init-security-context
            ## gitlab-migrations failed to init as root
            # - path: gitlab.migrations.init.containerSecurityContext
            #   value: *gitlab-init-security-context
            ## gitlab-shell crashed on startup as root
            # - path: gitlab.gitlab-shell.init.containerSecurityContext
            #   value: *gitlab-init-security-context
            - path: gitlab.gitlab-pages.init.containerSecurityContext
              value: *gitlab-init-security-context
            - path: gitlab.gitlab-exporter.init.containerSecurityContext
              value: *gitlab-init-security-context
            - path: gitlab.gitaly.init.containerSecurityContext
              value: *gitlab-init-security-context
            - path: global.redis.host
              value: "valkey-master.valkey.svc.cluster.local"

          variables:
            - name: MIGRATIONS_RESOURCES
              description: "Gitlab Migrations Resources"
              path: "gitlab.migrations.resources"
            - name: WEBSERVICE_REPLICAS
              description: "Gitlab Webservice Min Replicas"
              path: "gitlab.webservice.minReplicas"
            - name: WEBSERVICE_WORKERS
              description: "Gitlab Webservice Worker Count"
              path: "gitlab.webservice.workerProcesses"
            - name: WEBSERVICE_HPA
              description: "Gitlab Webservice HPA settings"
              path: "gitlab.webservice.hpa"
            - name: WEBSERVICE_RESOURCES
              description: "Gitlab Webservice Resources"
              path: "gitlab.webservice.resources"
            - name: WORKHORSE_RESOURCES
              description: "Gitlab Workhorse Resources"
              path: "gitlab.webservice.workhorse.resources"
            - name: SIDEKIQ_REPLICAS
              description: "Gitlab Sidekiq Min Replicas"
              path: "gitlab.sidekiq.minReplicas"
            - name: SIDEKIQ_HPA
              description: "Gitlab Sidekiq HPA settings"
              path: "gitlab.sidekiq.hpa"
            - name: SIDEKIQ_RESOURCES
              description: "Gitlab Sidekiq Resources"
              path: "gitlab.sidekiq.resources"
            - name: GITALY_RESOURCES
              description: "Gitlab Gitaly Resources"
              path: "gitlab.gitaly.resources"
            - name: REGISTRY_REPLICAS
              description: "Gitlab Registry Min Replicas"
              path: "registry.hpa.minReplicas"
            - name: SHELL_REPLICAS
              description: "Gitlab Shell Min Replicas"
              path: "gitlab.gitlab-shell.minReplicas"

  # Gitlab Runner
  - name: gitlab-runner
    repository: ghcr.io/defenseunicorns/packages/uds/gitlab-runner
    ref: 17.0.0-uds.0-registry1
    overrides:
      gitlab-runner:
        gitlab-runner:
          values:
            - path: volumes
              value: *extra-volumes
            - path: volumeMounts
              value: *extra-volume-mounts

  ### TODO - uncomment to replace functionality post MVP

  # # Sonarqube
  # - name: sonarqube-database-secret
  #   path: ../../build
  #   ref: 0.0.1

  # - name: sonarqube
  #   repository: ghcr.io/defenseunicorns/packages/uds/sonarqube
  #   ref: 8.0.3-uds.6-registry1

  # # Jira
  # - name: jira-database-secret
  #   path: ../../build
  #   ref: 0.0.1

  # - name: jira
  #   repository: ghcr.io/defenseunicorns/packages/uds/jira
  #   ref: 1.19.0-uds.0-registry1
  #   overrides:
  #     jira:
  #       jira:
  #         variables:
  #           - name: JIRA_LOCAL_HOME_ENABLED
  #             path: "volumes.localHome.persistentVolumeClaim.create"
  #             description: "Local Home Toggle"
  #             default: "true"
  #           - name: JIRA_RWO_STORAGE_CLASS
  #             path: "volumes.localHome.persistentVolumeClaim.storageClassName"
  #             description: "RWO storage class name"
  #           - name: JIRA_LOCAL_HOME_SIZE
  #             path: "volumes.localHome.persistentVolumeClaim.resources.requests.storage"
  #             description: "Storage size"
  #             default: "128Gi"
  #             # 1-2k users
  #           - name: JIRA_RESOURCE_CONFIG
  #             path: "jira.resources"
  #             default:
  #               container:
  #                 requests:
  #                   cpu: "100m"
  #                   memory: "2Gi"
  #                 limits:
  #                   cpu: "8"
  #                   memory: "16Gi"
  #               jvm:
  #                 maxHeap: "4g"

  # # Confluence
  # - name: confluence-database-secret
  #   path: ../../build
  #   ref: 0.0.1

  # - name: confluence
  #   repository: ghcr.io/defenseunicorns/packages/uds/confluence
  #   ref: 1.18.0-uds.0-registry1
  #   overrides:
  #     confluence:
  #       confluence:
  #         variables:
  #           - name: CONFLUENCE_LOCAL_HOME_ENABLED
  #             path: "volumes.localHome.persistentVolumeClaim.create"
  #             description: "Local Home Toggle"
  #             default: "true"
  #           - name: CONFLUENCE_RWO_STORAGE_CLASS
  #             path: "volumes.localHome.persistentVolumeClaim.storageClassName"
  #             description: "RWO storage class name"
  #           - name: CONFLUENCE_LOCAL_HOME_SIZE
  #             path: "volumes.localHome.persistentVolumeClaim.resources.requests.storage"
  #             description: "Storage size"
  #             default: "128Gi"
  #           - name: CONFLUENCE_RESOURCE_CONFIG
  #             path: "confluence.resources"
  #             default:
  #               container:
  #                 requests:
  #                   cpu: "2"
  #                   memory: "2Gi"
  #                 limits:
  #                   cpu: "4"
  #                   memory: "8Gi"
  #               jvm:
  #                 maxHeap: "4g"

  # # Mattermost
  # - name: mattermost
  #   repository: ghcr.io/defenseunicorns/packages/uds/mattermost
  #   ref: 9.7.2-uds.0-registry1
  #   overrides:
  #     mattermost:
  #       mattermost-enterprise-edition:
  #         variables:
  #           - name: VOLUMES
  #             path: "mattermostApp.extraVolumes"
  #             description: "Used to mount ca certs"
  #           - name: VOLUME_MOUNTS
  #             path: "mattermostApp.extraVolumeMounts"
  #             description: "Used to mount ca certs"
  #       uds-mattermost-config:
  #         variables:
  #           - name: OBJECT_STORE_SECURE
  #             path: "objectStorage.secure"
  #             description: "Object storage ssl"
  #             default: "false"
  #           - name: OBJECT_STORE_ENDPOINT
  #             path: "objectStorage.endpoint"
  #             description: "Object storage endpoint"
  #           - name: OBJECT_STORE_BUCKET
  #             path: "objectStorage.bucket"
  #             description: "Object storage bucket"
  #             default: "mattermost-bucket"
  #           - name: OBJECT_STORE_REGION
  #             path: "objectStorage.region"
  #             description: "Object storage region"
  #             default: "us-east-1"
  #           - name: DB_ENDPOINT
  #             path: "postgres.host"
  #             description: "Postgres DB endpoint"
  #           - name: DB_USERNAME
  #             path: "postgres.username"
  #             description: "Postgres DB username"
  #             default: "postgres"
  #           - name: DB_NAME
  #             path: "postgres.dbName"
  #             description: "Postgres DB database name"
  #             default: "mattermostdb"
  #           - name: DB_OPTIONS
  #             path: "postgres.connectionOptions"
  #             description: "Postgres DB connection options"
  #             default: "?connect_timeout=10"
  #           # 1-2k users
  #           - name: MATTERMOST_RESOURCE_CONFIG
  #             path: mattermostApp.resources
  #             description: "Mattermost Resource Config"
  #             default:
  #               requests:
  #                 cpu: 100m
  #                 memory: 256Mi
  #               limits:
  #                 cpu: 2
  #                 memory: 4Gi

  # Nexus
  - name: nexus
    repository: ghcr.io/defenseunicorns/packages/uds/nexus
    ref: 3.69.0-uds.0-registry1
    overrides:
      nexus:
        nexus:
          variables:
            # Medium <50 repositories
            - name: NEXUS_RESOURCE_CONFIG
              path: nexus.resources
              default:
                requests:
                  cpu: 2
                  memory: 4Gi
                limits:
                  cpu: 8
                  memory: 16Gi
          values:
            - path: sso.realm
              value:
                - "NexusAuthenticatingRealm"
                - "SamlRealm"
                - "User-Token-Realm"
                - "NuGetApiKey"
            - path: nexus.docker.enabled
              value: true
            - path: nexus.docker.registries
              value:
                - host: nexus-docker.${DOMAIN}
                  port: 5000
            - path: deployment.additionalVolumes
              value: *extra-volumes
            - path: deployment.additionalVolumeMounts
              value: *extra-volume-mounts
        uds-nexus-config:
          variables:
            - name: NEXUS_SSO_ENABLED
              path: "sso.enabled"
          values:
            - path: additionalNetworkExposures
              value:
                - service: nexus-nexus-repository-manager-docker-5000
                  selector:
                    app.kubernetes.io/instance: nexus
                  gateway: tenant
                  host: nexus-docker
                  port: 5000
